<div id="a1"> <h1>Essentials</h1> <table> <thead> <tr> <th>********</th> <th>*********</th> <th>column3</th> </tr> </thead> <tbody> <tr> <td>content1</td> <td>content2</td> <td>content3</td> </tr> </tbody> </table> <ul> <li>无序列表1</li> <li>无序列表2</li> <li>无序列表3</li> </ul> </div> <div id="a3"> <h2>Getting Started</h2> <div class="hljs-left"> <p>Creating a Single-page Application with Vue + Vue Router is dead simple. With Vue.js, we are already composing our application with components. When adding vue-router to the mix, all we need to do is map our components to the routes and let vue-router know where to render them. Here’s a basic example:</p> </div> <pre><div class="hljs"><code class="lang-javascript">&lt;script src=<span class="hljs-string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span> &lt;script src=<span class="hljs-string">"https://unpkg.com/vue-router/dist/vue-router.js"</span>&gt;<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span> &lt;div id=<span class="hljs-string">"app"</span>&gt; <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello App!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span> &lt;p&gt; &lt;!-- use router-link component for navigation. --&gt; &lt;!-- specify the link by passing the `to` prop. --&gt; &lt;!-- `&lt;router-link&gt;` will be rendered as an `&lt;a&gt;` tag by default --&gt; &lt;router-link to="/foo"&gt;Go to Foo&lt;/router-link&gt; &lt;router-link to="/bar"&gt;Go to Bar&lt;/router-link&gt; &lt;/p&gt; &lt;!-- route outlet --&gt; &lt;!-- component matched by the route will render here --&gt; &lt;router-view&gt;&lt;/router-view&gt; &lt;/div&gt; </code></div></pre> <div class="hljs-left"> <p>Throughout the docs, we will often use the router instance. Keep in mind that this.<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>i</mi><mi>s</mi><mi>e</mi><mi>x</mi><mi>a</mi><mi>c</mi><mi>t</mi><mi>l</mi><mi>y</mi><mi>t</mi><mi>h</mi><mi>e</mi><mi>s</mi><mi>a</mi><mi>m</mi><mi>e</mi><mi>a</mi><mi>s</mi><mi>u</mi><mi>s</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>r</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi mathvariant="normal">.</mi><mi>T</mi><mi>h</mi><mi>e</mi><mi>r</mi><mi>e</mi><mi>a</mi><mi>s</mi><mi>o</mi><mi>n</mi><mi>w</mi><mi>e</mi><mi>u</mi><mi>s</mi><mi>e</mi><mi>t</mi><mi>h</mi><mi>i</mi><mi>s</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">router is exactly the same as using router. The reason we use this.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="base"><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord mathit">o</span><span class="mord mathit">u</span><span class="mord mathit">t</span><span class="mord mathit">e</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord mathit">i</span><span class="mord mathit">s</span><span class="mord mathit">e</span><span class="mord mathit">x</span><span class="mord mathit">a</span><span class="mord mathit">c</span><span class="mord mathit">t</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="mord mathit">t</span><span class="mord mathit">h</span><span class="mord mathit">e</span><span class="mord mathit">s</span><span class="mord mathit">a</span><span class="mord mathit">m</span><span class="mord mathit">e</span><span class="mord mathit">a</span><span class="mord mathit">s</span><span class="mord mathit">u</span><span class="mord mathit">s</span><span class="mord mathit">i</span><span class="mord mathit">n</span><span class="mord mathit" style="margin-right:0.03588em;">g</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord mathit">o</span><span class="mord mathit">u</span><span class="mord mathit">t</span><span class="mord mathit">e</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord mathrm">.</span><span class="mord mathit" style="margin-right:0.13889em;">T</span><span class="mord mathit">h</span><span class="mord mathit">e</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord mathit">e</span><span class="mord mathit">a</span><span class="mord mathit">s</span><span class="mord mathit">o</span><span class="mord mathit">n</span><span class="mord mathit" style="margin-right:0.02691em;">w</span><span class="mord mathit">e</span><span class="mord mathit">u</span><span class="mord mathit">s</span><span class="mord mathit">e</span><span class="mord mathit">t</span><span class="mord mathit">h</span><span class="mord mathit">i</span><span class="mord mathit">s</span><span class="mord mathrm">.</span></span></span></span>router is because we don’t want to import the router in every single component that needs to manipulate routing.</p> </div> </div> <div id="a4"> <h2>Dynamic Route Matching</h2> <div class="hljs-left"> <p>Very often we will need to map routes with the given pattern to the same component. For example we may have a User component which should be rendered for all users but with different user IDs. In vue-router we can use a dynamic segment in the path to achieve that:</p> </div> <div class="hljs-left"> <p>Now URLs like /user/foo and /user/bar will both map to the same route.</p> <p>A dynamic segment is denoted by a colon :. When a route is matched, the value of the dynamic segments will be exposed as this.$route.params in every component. Therefore, we can render the current user ID by updating User’s template to this:</p> </div> <pre><div class="hljs"><code class="lang-javascript"><span class="hljs-keyword">const</span> User = { <span class="hljs-attr">template</span>: <span class="hljs-string">'&lt;div&gt;User&lt;/div&gt;'</span> } <span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter({ <span class="hljs-attr">routes</span>: [ <span class="hljs-comment">// dynamic segments start with a colon </span> { <span class="hljs-attr">path</span>: <span class="hljs-string">'/user/:id'</span>, <span class="hljs-attr">component</span>: User } ] }) </code></div></pre> </div> <div id="a5"> <h2>Nested Routes</h2> <div class="hljs-left"> <p>Real app UIs are usually composed of components that are nested multiple levels deep. It is also very common that the segments of a URL corresponds to a certain structure of nested components, for example:</p> </div> <div class="hljs-left"> <p>Real app UIs are usually composed of components that are nested multiple levels deep. It is also very common that the segments of a URL corresponds to a certain structure of nested components, for example:</p> </div> </div> <div id="a2"> <h1>Advanced</h1> <div class="hljs-left"> <p>Real app UIs are usually composed of components that are nested multiple levels deep. It is also very common that the segments of a URL corresponds to a certain structure of nested components, for example:</p> </div> <div class="hljs-left"> <p>Real app UIs are usually composed of components that are nested multiple levels deep. It is also very common that the segments of a URL corresponds to a certain structure of nested components, for example:</p> </div> </div> <div id="a6"> <h2>Navigation Guards</h2> <div class="hljs-left"> <p>As the name suggests, the navigation guards provided by vue-router are primarily used to guard navigations either by redirecting it or canceling it. There are a number of ways to hook into the route navigation process: globally, per-route, or in-component.</p> </div> <div class="hljs-left"> <p>Remember that params or query changes won’t trigger enter/leave navigation guards. You can either watch the $route object to react to those changes, or use the beforeRouteUpdate in-component guard.</p> </div> </div>